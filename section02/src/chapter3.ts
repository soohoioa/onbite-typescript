// object
let user: {
  id?: number; // 여기서 ?의 의미는 프로퍼티가 있어도 되고 없어도 된다는 뜻이다.
  name: String; // 이런식으로 property의 타입들까지 모두 정의한다.
} = {
  id: 1,
  name: "몽블랑",
};

/**
user.id 식으로 점 표기법으로 객체의 property에 접근하려고 하면 오류가 발생한다.
타입스크립트 에서 object라는 타입은 이 값이 객체다 라는 정보 외에는 아무런 정보가 없는 타입니다. 
object가 아닌 객체 리터럴 타입을 이용해야 한다.

중괄호를 이용하여 객체의 타입을 정의하는 방식을 객체 리터럴 타입 이라 한다.
***
object 같은 단순한 이름으로 타입을 정의하는게 아닌 객체를 이루는 프로퍼티나 메소드등 이 객체의 구조를 기준으로 타입을 정의하는 것을 구조적 타입 시스템이라 한다.
더 쉽게 말하면 프로퍼티 타입으로 결정하는 시스템이라 Property Based Type System이라고 부르기도 한다. 
반대로 Java, C언어 처럼 이름을 기준으로 타입을 정의하는 것을 명목적 타입 시스템이라고 한다.

이름을 기준으로 타입을 정의한다. : 명목적 타입 시스템
구조를 기준으로 타입을 정의한다, : 구조적 타입 시스템
 */

let config: {
  readonly apiKey: String; // readonly : 프로퍼티의 값을 바꾸는 행위를 막아준다.
} = {
  apiKey: "MY API KEY",
};
